function [layersMatrix, optionsCells] = prepareLSTMParameters(trainSequences, trainLabels, validationSequences, validationlabels, params)

numFeatures = size(trainSequences{1},1);
classes = categories(trainLabels);
numClasses = numel(classes);

variableParams = params.variable;
numTests = size(variableParams, 2);
layersMatrix = [];
optionsCells = {};

for i = 1:numTests
    layers = [
        sequenceInputLayer(numFeatures,'Name','sequence')
        bilstmLayer(variableParams(i).hiddenUnits,'OutputMode',variableParams(i).bilstmOutputMode,'Name','bilstm')
        dropoutLayer(variableParams(i).dropout,'Name','drop')
        fullyConnectedLayer(numClasses,'Name','fc')
        softmaxLayer('Name','softmax')
        classificationLayer('Name','classification')];
    
    miniBatchSize = variableParams(i).miniBatchSize;
    numObservations = numel(trainSequences);
    numIterationsPerEpoch = floor(numObservations / miniBatchSize);

    options = trainingOptions(variableParams(i).solver, ...
        'MiniBatchSize',miniBatchSize, ...
        'InitialLearnRate',variableParams(i).initialLearnRate, ...
        'LearnRateSchedule',params.const.learnRateSchedule, ...
        'LearnRateDropPeriod',variableParams(i).learnRateDropPeriod, ...
        'LearnRateDropFactor',variableParams(i).learnRateDropFactor, ...
        'SequencePaddingDirection',variableParams(i).sequencePaddingDirection, ...
        'GradientThreshold',variableParams(i).gradientThreshold, ...
        'Shuffle',variableParams(i).shuffle, ...
        'MaxEpochs',variableParams(i).maxEpochs, ...
        'ValidationData',{validationSequences, validationlabels}, ...
        'ValidationFrequency',max(numIterationsPerEpoch, 1), ...
        'ValidationPatience', variableParams(i).validationPatience, ...
        'Plots',params.const.plot, ...
        'Verbose',false, ...
        'OutputFcn',@(info)train.customTrainOutput(info, params.const));
    
    layersMatrix = [layersMatrix, layers];
    optionsCells = [optionsCells, {options}];
end

end